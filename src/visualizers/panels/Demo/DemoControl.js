/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Nov 24 2020 21:58:15 GMT-0600 (CST).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function DemoControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    }

    DemoControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    DemoControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
        
        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            if (typeof desc.parentId === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            self._selfPatterns[nodeId] = {children: 1};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }  
        
        MyRunServerPlugin(self);
        setTimeout(()=>{self._widget.initNetwork(self._client._component,self._client._classification);},3000);
    };

    // new run server plugin to use it in multiple areas
    const MyRunServerPlugin = function (own_self) {
        var component = {} 
        var class_info
        var myContext = own_self._client.getCurrentPluginContext('ModelicaCodeGenerator');
        own_self._client.runServerPlugin('ModelicaCodeGenerator', myContext, function (error, python_message) {
            console.info(python_message);
            let message = python_message.messages
            //console.info(message.length);
            class_info = message[message.length - 1].message
            for (let pi = 0; pi < message.length - 1; pi++) {
                let single_message = message[pi].message.split(',');
                //console.info('single message')
                //console.info(single_message);
                component[single_message[0]] = []}

            component['classification'] = []
            for (let ki = 0; ki < message.length - 1; ki++) {
                let single_message = message[ki].message.split(',');
                //console.info(single_message)
                //console.info(single_message[0])
                if (single_message[0] === 'Place'){
                    var node_data = {}
                
                    node_data['name'] = single_message[1];
                    node_data['path'] = single_message[2];
                    node_data['marking'] = single_message[3];
                    component[single_message[0]].push(node_data);}
                else if (single_message[0] === 'Transition'){
                    var node_data = {}
                   
                    node_data['name'] = single_message[1];
                    node_data['path'] = single_message[2];
                    component[single_message[0]].push(node_data);}
                    
                else if (single_message[0] === 'InplaceArc'){
                    var node_data = {}
                    node_data['name'] = single_message[1];
                    node_data['path'] = single_message[2];
                    node_data['src'] = single_message[3];
                    node_data['dst'] = single_message[4];
                    component[single_message[0]].push(node_data);}
                   
                else if (single_message[0] === 'OutplaceArc'){
                    var node_data = {}
                    node_data['name'] = single_message[1];
                    node_data['path'] = single_message[2];
                    node_data['src'] = single_message[3];
                    node_data['dst'] = single_message[4];
                    component[single_message[0]].push(node_data);}
                    
            }  
            //console.info(component);
            //console.info(class_info)
            
        });
        setTimeout(()=>{own_self._client._component=component;own_self._client._classification=class_info;},1000);  
    }

    // This next function retrieves the relevant node information for the widget
    DemoControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId)
            };
        }

        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    DemoControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    DemoControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    DemoControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    DemoControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    DemoControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DemoControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    DemoControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    DemoControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    DemoControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    DemoControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    DemoControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    DemoControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    DemoControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    DemoControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;
        
        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();


        // click this button to display the classification
        var new_this = this
        const classes = ['Free-choice Petri-net', 'State Machine', 'Marked Graph', 'Workflow Net'];
        this._toolbarInitialized = true;
        this.$btnGraphClassification = toolBar.addButton({
            title: 'Disyplay the classification',
            icon: 'glyphicon glyphicon-search',
            clickFn: function () {
                console.info('Toolbar')
                
                console.info('classification')
                console.info(new_this._client._classification)
                let class_message = new_this._client._classification.split(',');
                let count = 0;
                let message = "This Petri-net is a "
                for (let ri = 0; ri < class_message.length; ri++) {
                    console.info(class_message[ri])
                    console.info(count)
                    if (class_message[ri] === "1") {
                        message = message + classes[ri] + ', ';
                        count = count + 1;
                    }
                }
                if (count !== 0){
                alert(message);
                }else{
                    alert("This Petri-net doesn't have a classification.")
                }
            }
        });

        this._toolbarItems.push(this.$btnGraphClassification);
        // click the botton to reset the graph

        this.$btnGraphReset = toolBar.addButton({
            title: 'Reset the graph',
            icon: 'glyphicon glyphicon-refresh',
            clickFn: function () {
                
                console.info(new_this._widget)
                new_this._widget._initialize();
                new_this._widget.initNetwork(new_this._client._component,new_this._client._classification);
            }
        });
        this._toolbarItems.push(this.$btnGraphReset);
        
        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

    };

    return DemoControl;
});